2025-01-15 20:20:38,870 - train - INFO - TopicExpan(
  (doc_encoder): BertDocEncoder(
    (model): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30522, 768, padding_idx=0)
        (position_embeddings): Embedding(512, 768)
        (token_type_embeddings): Embedding(2, 768)
        (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSdpaSelfAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=768, out_features=3072, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=3072, out_features=768, bias=True)
              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=768, out_features=768, bias=True)
        (activation): Tanh()
      )
    )
    (input_embeddings): BertEmbeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (token_type_embeddings): Embedding(2, 768)
      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0.1, inplace=False)
    )
  )
  (phrase_decoder): TransformerPhraseDecoder(
    (input_embeddings): BertEmbeddings(
      (word_embeddings): Embedding(30522, 768, padding_idx=0)
      (position_embeddings): Embedding(512, 768)
      (token_type_embeddings): Embedding(2, 768)
      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0.1, inplace=False)
    )
    (output_embeddings): Linear(in_features=768, out_features=30522, bias=False)
    (model): TransformerDecoder(
      (layers): ModuleList(
        (0): TransformerDecoderLayer(
          (self_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
          )
          (multihead_attn): MultiheadAttention(
            (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
          )
          (linear1): Linear(in_features=768, out_features=2048, bias=True)
          (dropout): Dropout(p=0.1, inplace=False)
          (linear2): Linear(in_features=2048, out_features=768, bias=True)
          (norm1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (norm2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (norm3): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (dropout1): Dropout(p=0.1, inplace=False)
          (dropout2): Dropout(p=0.1, inplace=False)
          (dropout3): Dropout(p=0.1, inplace=False)
        )
      )
    )
  )
  (topic_encoder): GCNTopicEncoder(
    (downward_layers): ModuleList(
      (0-1): 2 x GraphConv(in=300, out=300, normalization=right, activation=None)
    )
    (upward_layers): ModuleList(
      (0-1): 2 x GraphConv(in=300, out=300, normalization=right, activation=None)
    )
    (sideward_layers): ModuleList(
      (0-1): 2 x GraphConv(in=300, out=300, normalization=right, activation=None)
    )
  )
  (interaction): BilinearInteraction()
  (linear_combiner): Linear(in_features=1068, out_features=768, bias=True)
)
Trainable parameters: 142394216
2025-01-15 20:38:54,346 - trainer - INFO -     epoch          : 1
2025-01-15 20:38:54,349 - trainer - INFO -     elapsed time   : 1092.3503227233887
2025-01-15 20:38:54,349 - trainer - INFO -     loss           : 149.48292033291796
2025-01-15 20:38:54,349 - trainer - INFO -     sim_loss       : 17.986566406378397
2025-01-15 20:38:54,349 - trainer - INFO -     gen_loss       : 131.4963539488023
2025-01-15 20:38:54,349 - trainer - INFO -     val_loss       : 118.51173553466796
2025-01-15 20:38:54,349 - trainer - INFO -     val_sim_loss   : 15.307031297683716
2025-01-15 20:38:54,349 - trainer - INFO -     val_gen_loss   : 103.20470390319824
2025-01-15 20:38:54,350 - trainer - INFO -     val_perplexity : 15.209503173828125
2025-01-15 20:38:54,350 - trainer - INFO -     val_accuracy   : 0.0
2025-01-15 20:39:10,032 - trainer - INFO - Saving checkpoint: congress-save/models/checkpoint-epoch1.pth ...
2025-01-15 20:39:26,471 - trainer - INFO - Saving current best: model_best.pth ...
2025-01-15 20:57:38,592 - trainer - INFO -     epoch          : 2
2025-01-15 20:57:38,595 - trainer - INFO -     elapsed time   : 1092.1195414066315
2025-01-15 20:57:38,595 - trainer - INFO -     loss           : 110.07810388869494
2025-01-15 20:57:38,595 - trainer - INFO -     sim_loss       : 16.691193085151696
2025-01-15 20:57:38,595 - trainer - INFO -     gen_loss       : 93.38691074400332
2025-01-15 20:57:38,595 - trainer - INFO -     val_loss       : 105.8184326171875
2025-01-15 20:57:38,595 - trainer - INFO -     val_sim_loss   : 15.217833721637726
2025-01-15 20:57:38,595 - trainer - INFO -     val_gen_loss   : 90.6005989074707
2025-01-15 20:57:38,595 - trainer - INFO -     val_perplexity : 11.75241756439209
2025-01-15 20:57:38,595 - trainer - INFO -     val_accuracy   : 0.05
2025-01-15 20:57:54,541 - trainer - INFO - Saving checkpoint: congress-save/models/checkpoint-epoch2.pth ...
2025-01-15 20:58:11,174 - trainer - INFO - Saving current best: model_best.pth ...
